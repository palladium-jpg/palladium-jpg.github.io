<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-12-05T09:33:18.613Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划01</title>
    <link href="http://example.com/2021/11/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201/"/>
    <id>http://example.com/2021/11/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9201/</id>
    <published>2021-11-27T08:23:54.000Z</published>
    <updated>2021-12-05T09:33:18.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><p>动态规划问题的问题一般形式就是求解最优化问题。（拥有很多的可行解，每个解都有一个值，目标是寻找最优值的解）。比如最长递增子序列，最小编辑距离等。</p><p>对于动态规划，其核心问题就是穷举，只要再所有的可行答案都穷举出来再找到最值，就能解决问题。</p><p>与分治法不同之处在于，分治法解决的问题是互不相交的子问题，而动态规划所能解决的问题是适用于子问题重叠得情况。</p><p>也就是这类问题中存在：重叠子问题。使得暴力穷举会导致效率抵下。</p><p>其实只要能够找到正确的”状态转移方程“就能成功的解决动态规划类型的题目。</p><p>动态规划算法的设计步骤：</p><ol><li>刻画一个最优解的结构特征（寻找一个问题的 base case ）</li><li>递归的定义最优解的值 （寻找问题的状态）</li><li>计算最优解的值（根据每一个状态，寻找可以使得状态发生改变的选择）</li><li>利用前几步的信息来构造目标最优解（定义一个dp数组/函数 来表现”状态“与”选择“）</li></ol><p>关键就是三点 <strong>状态，选择，dp数组/函数</strong></p><p>存在的基本框架</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#初始化数据 basecase</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][···] = base <span class="keyword">case</span></span><br><span class="line">#开始进行相位转移（雾）</span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有的取值：</span><br><span class="line">        <span class="keyword">for</span>·······</span><br><span class="line">        dp[状态<span class="number">1</span>][状态<span class="number">2</span>][····]=求最值（选择<span class="number">1</span>，选择<span class="number">2</span>，·····）</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h2><p>接下来会用例题的形式来进行动态规划的基础教学（因为懒就不放链接）</p><h4 id="洛谷P1255数楼梯"><a href="#洛谷P1255数楼梯" class="headerlink" title="洛谷P1255数楼梯"></a>洛谷P1255数楼梯</h4><p><a href="https://www.luogu.com.cn/problem/P1255">https://www.luogu.com.cn/problem/P1255</a></p><p>解法1：暴力递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">1</span>||N==<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fib</span>(N<span class="number">-1</span>)+<span class="built_in">fib</span>(N<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：过于低效</p><p>解法2：带备忘录的递归解法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般使用一个数组或者哈希表（字典）来存储会重复计算的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fin</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">memo</span>(N+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">helper</span>(memo,N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;memo,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(memo[n]!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> memo[n];</span><br><span class="line">memo[n] = <span class="built_in">helper</span>(memo,n<span class="number">-1</span>)+<span class="built_in">helper</span>(memo,n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减少了大量的数据冗余</span></span><br></pre></td></tr></table></figure><p>3.dp数组迭代写法，自底向上减少计算量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">1</span>||N==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">dp[<span class="number">1</span>]=dp[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i]=d[i<span class="number">-1</span>]+dp[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>事实上只要能成功的找到暴力解法，并进行优化就能解决绝大部分动态规划问题</strong></p><p>4.状态压缩（减少空间复杂度）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(N==<span class="number">1</span>||N==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> prev =<span class="number">1</span>,curr=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sum =prev +curr;</span><br><span class="line">prev =curr;</span><br><span class="line">curr =sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是根据上述所提思想而对于数楼梯问题的解决</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Data[<span class="number">5001</span>][<span class="number">2001</span>];</span><br><span class="line"><span class="comment">//有记忆法和自底向上法两种</span></span><br><span class="line"><span class="comment">//适用于高精度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">DpFUnction</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">Data[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">Data[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">Data[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">Data[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">Data[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">Data[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//借用下标为1的地址空间来存储输出结果的长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;=N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> maxn = <span class="built_in">max</span>(Data[i - <span class="number">1</span>][<span class="number">0</span>], Data[i - <span class="number">2</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=maxn; j++)</span><br><span class="line">&#123;</span><br><span class="line">Data[i][j] = (Data[i - <span class="number">1</span>][j] + Data[i - <span class="number">2</span>][j] + temp)%<span class="number">10</span>;</span><br><span class="line">temp = (Data[i - <span class="number">1</span>][j] + Data[i - <span class="number">2</span>][j] + temp) / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">maxn += <span class="number">1</span>;</span><br><span class="line">Data[i][maxn] = temp;</span><br><span class="line">&#125;</span><br><span class="line">Data[i][<span class="number">0</span>] = maxn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Printf</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = Data[N][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; Data[N][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; N;</span><br><span class="line"><span class="built_in">DpFUnction</span>(N);</span><br><span class="line"><span class="built_in">Printf</span>(N);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p>这一题是典型的01背包问题</p><p>特点：每一种物品仅有一件，只可以选择放与不放（不能对物品进行差分）</p><p>则标注套路：</p><ol><li>确定“状态”与“选择”（存在两种状态，即”背包的容量“与”可选择的物品“；存在的选择是对于物品是装入背包还是不装入背包”）</li><li>明确dp数组的含义（对于01背包问题可定义一个二维dp数组，<br>$$<br>dp[i][w]<br>$$</li></ol><p> 其定义为对于前i个物品，若当前的背包容量为w，这种情况下可以装的最大价值为<br>$$<br>dp[i][j]<br>$$<br>3.根据选择来思考状态转移的逻辑 </p><p>也就是表示出对于物品i的装入背包与不装入背包</p><p>最后完成的01背包模板代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> w,<span class="keyword">int</span> N,vector&lt;<span class="keyword">int</span>&gt;&amp;wt,vector&lt;<span class="keyword">int</span>&gt;&amp;val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(N+<span class="number">1</span>,vector&lt;<span class="keyword">int</span>&gt;(W+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> w=<span class="number">1</span>;w&lt;=W;w++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">if</span>(w-wt[i<span class="number">-1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">dp[i][w]=dp[i<span class="number">-1</span>][w];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dp[i][w]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][w],dp[i<span class="number">-1</span>][w-wt[i<span class="number">-1</span>]]+val[i<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P1060开心的金明"><a href="#P1060开心的金明" class="headerlink" title="P1060开心的金明"></a>P1060开心的金明</h4><p><a href="https://www.luogu.com.cn/problem/P1060">https://www.luogu.com.cn/problem/P1060</a></p><p>对于该问题的解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">26</span>][<span class="number">30001</span>];</span><br><span class="line">ll v[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> total, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; total;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; v[i];</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= total; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt;=v[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - v[i]] + v[i] * w[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[m][total];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于01背包问题存在方法能够优化其空间复杂度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll dp[<span class="number">30001</span>];</span><br><span class="line">ll v[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> total, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; total;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; v[i];</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = total; j &gt;= v[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">dp[i]=<span class="built_in">max</span>(dp[i],dp[i-wt[i<span class="number">-1</span>]]+w[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[total];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的几题都是01背包问题及简单变种</p><p>P1049装箱问题</p><p><a href="https://www.luogu.com.cn/problem/P1049">https://www.luogu.com.cn/problem/P1049</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> Dp[<span class="number">20001</span>];</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; V;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= arr[i]; j--)<span class="comment">//对于第i件物品有防与不放两种选择</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Dp[j] =<span class="built_in">max</span>(Dp[j], Dp[j - arr[i]] + arr[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任意重量j的最大价值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;V-Dp[V];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="p1146小A点菜"><a href="#p1146小A点菜" class="headerlink" title="p1146小A点菜"></a>p1146小A点菜</h4><p><a href="https://www.luogu.com.cn/problem/P1164#submit">https://www.luogu.com.cn/problem/P1164#submit</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> M, N;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>];<span class="comment">//价钱为M时的最多的种类</span></span><br><span class="line"><span class="keyword">int</span> Dp[<span class="number">101</span>][<span class="number">10001</span>];<span class="comment">//对于前i-1件商品价钱合计为j的方法数量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=M ;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//转移也是对于第i件食物是选择或者不选择</span></span><br><span class="line"><span class="keyword">if</span> (j == a[i])</span><br><span class="line">&#123;</span><br><span class="line">Dp[i][j] = Dp[i - <span class="number">1</span>][j] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&gt;a[i])</span><br><span class="line">&#123;</span><br><span class="line">Dp[i][j] = Dp[i - <span class="number">1</span>][j] + Dp[i - <span class="number">1</span>][j - a[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    Dp[i][j]=Dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; Dp[N][M];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="P1048采药"><a href="#P1048采药" class="headerlink" title="P1048采药"></a>P1048采药</h4><p><a href="https://www.luogu.com.cn/problem/P1048#submit">https://www.luogu.com.cn/problem/P1048#submit</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> T, M;<span class="comment">//T 总的采药时间 M 草药的数目</span></span><br><span class="line"><span class="keyword">int</span> tm[<span class="number">101</span>];<span class="comment">//采第i棵草药所需要的时间</span></span><br><span class="line"><span class="keyword">int</span> va[<span class="number">101</span>];<span class="comment">//第i棵药的价值</span></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">101</span>][<span class="number">1001</span>];<span class="comment">//采前i棵药时花费J的时间所能生产的最大价值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; T &gt;&gt; M;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; tm[i];</span><br><span class="line">cin &gt;&gt; va[i];</span><br><span class="line">dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= T; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = T; j &gt;<span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=tm[i])&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - tm[i]] + va[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[M][T];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p>这种问题类似于01背包问题，但不同点在于所有的物品的数量是无限的！</p><p>解题思路:</p><p>1.可以仍然按照解01背包时的思路,任意可以按照每种不同的物品来写状态转移方程<br>$$<br>F[i,v] = max{F[i-1,v-kC_i]+kW_i}  (0&lt;=k&lt;=v/C_i)<br>$$<br>2.可以使用O(VN)的算法来解决</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">F[<span class="number">0.</span>.V]&lt;<span class="number">-0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=C_i ;v&lt;=V;v++)</span><br><span class="line">&#123;</span><br><span class="line">F[V]= <span class="built_in">max</span>(F[v],F[v-C_i]+W_i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P1616-疯狂的采药"><a href="#P1616-疯狂的采药" class="headerlink" title="P1616 疯狂的采药"></a>P1616 疯狂的采药</h4><p><a href="https://www.luogu.com.cn/problem/P1616">https://www.luogu.com.cn/problem/P1616</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll T;</span><br><span class="line">ll m;</span><br><span class="line">ll w[<span class="number">10001</span>];</span><br><span class="line">ll v[<span class="number">10001</span>];</span><br><span class="line"><span class="comment">//每一种草药有无限多个</span></span><br><span class="line">vector&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; dp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; T &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">&#125;</span><br><span class="line">dp.<span class="built_in">resize</span>(T+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= T; j++)</span><br><span class="line">&#123;</span><br><span class="line">dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[T];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="P1064-NOIP2006-提高组-金明的预算方案"><a href="#P1064-NOIP2006-提高组-金明的预算方案" class="headerlink" title="P1064 [NOIP2006 提高组] 金明的预算方案"></a>P1064 [NOIP2006 提高组] 金明的预算方案</h4><p>因为只有少量的附件,而且附件只能依靠于主件,所以可以简单的排列组合将其划分为4种物品来进行考虑.</p><p><a href="https://www.luogu.com.cn/problem/P1064">https://www.luogu.com.cn/problem/P1064</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> Money, m;</span><br><span class="line"><span class="keyword">int</span> v, p, q;</span><br><span class="line">ll main_v[<span class="number">61</span>], main_p[<span class="number">61</span>];</span><br><span class="line">ll vice_v[<span class="number">61</span>][<span class="number">5</span>], vice_p[<span class="number">61</span>][<span class="number">5</span>];</span><br><span class="line">ll dp[<span class="number">32001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; Money&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; v &gt;&gt; p &gt;&gt; q;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">main_v[i] = v;</span><br><span class="line">main_p[i] = p*v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">vice_v[q][<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">int</span> tar = vice_v[q][<span class="number">0</span>];</span><br><span class="line">vice_p[q][<span class="number">0</span>] = tar;</span><br><span class="line">vice_v[q][tar] = v;</span><br><span class="line">vice_p[q][tar] = p*v;</span><br><span class="line">vice_v[q][<span class="number">4</span>] = vice_v[q][<span class="number">1</span>] + vice_v[q][<span class="number">2</span>];</span><br><span class="line">vice_p[q][<span class="number">4</span>] = vice_p[q][<span class="number">1</span>] + vice_p[q][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (main_v[i]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>  j = Money; j &gt;= main_v[i]; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;=<span class="number">4</span> ; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= main_v[i] + vice_v[i][k]) &#123;</span><br><span class="line">dp[j] = <span class="built_in">max</span>(dp[j], dp[j - main_v[i] - vice_v[i][k]]+ main_p[i] + vice_p[i][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[Money];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&quot;初识&quot;&gt;&lt;a href=&quot;#初识&quot; class=&quot;headerlink&quot; title=&quot;初识&quot;&gt;&lt;/a&gt;初识&lt;/h</summary>
      
    
    
    
    
    <category term="dynamic planning" scheme="http://example.com/tags/dynamic-planning/"/>
    
  </entry>
  
  <entry>
    <title>JNOJ</title>
    <link href="http://example.com/2021/11/27/JNOJ/"/>
    <id>http://example.com/2021/11/27/JNOJ/</id>
    <published>2021-11-27T08:22:26.000Z</published>
    <updated>2021-11-27T08:32:04.476Z</updated>
    
    
    
    
    
    <category term="Project Team" scheme="http://example.com/tags/Project-Team/"/>
    
  </entry>
  
  <entry>
    <title>Note.001</title>
    <link href="http://example.com/2021/11/02/Note-001/"/>
    <id>http://example.com/2021/11/02/Note-001/</id>
    <published>2021-11-02T14:40:54.000Z</published>
    <updated>2021-11-27T08:32:29.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2021/11/bfedbeeb8397cd2a.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s3.bmp.ovh/imgs/2021/11/bfedbeeb8397cd2a.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Test" scheme="http://example.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2021/11/01/test/"/>
    <id>http://example.com/2021/11/01/test/</id>
    <published>2021-11-01T15:29:39.000Z</published>
    <updated>2021-11-27T08:32:40.133Z</updated>
    
    <content type="html"><![CDATA[<pre class="mermaid">graph TD;A-->B;A-->C;B-->D;C-->D;</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;mermaid&quot;&gt;graph TD;
A--&gt;B;
A--&gt;C;
B--&gt;D;
C--&gt;D;&lt;/pre&gt;</summary>
      
    
    
    
    
    <category term="Test" scheme="http://example.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/31/hello-world/"/>
    <id>http://example.com/2021/10/31/hello-world/</id>
    <published>2021-10-31T13:58:57.288Z</published>
    <updated>2021-10-31T13:58:57.288Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
